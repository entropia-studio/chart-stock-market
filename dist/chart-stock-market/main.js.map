{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/chart-stocks.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\\nbody {\\n  display: flex;\\n  flex-direction: column;\\n  margin: auto;\\n  align-items: center;\\n  font-family: 'Roboto', sans-serif;\\n  background-color: #607D8B;\\n  margin-top: 15px;\\n  font-size: 0.8em;\\n}\\nbody a {\\n  color: white;\\n}\\nli {\\n  list-style: none;\\n}\\n.main {\\n  width: 1140px;\\n  display: flex;\\n  justify-content: space-between;\\n  background-color: #455A64;\\n  color: #FFFFFF;\\n  font-size: 0.9em;\\n  flex-wrap: wrap;\\n  padding: 15px;\\n  margin-bottom: 10px;\\n}\\n.zoom {\\n  display: flex;\\n  width: 555px;\\n  font-size: 1em;\\n}\\n.zoom button {\\n  border: 0px;\\n  font-size: 0.9em;\\n  background-color: #212121;\\n  color: white;\\n}\\n.zoom li {\\n  padding-right: 5px;\\n}\\n.chart {\\n  width: 100%;\\n  margin-top: 0.8em;\\n  margin-bottom: 0.8em;\\n}\\n.stocks {\\n  display: flex;\\n  justify-content: space-between;\\n  width: 100%;\\n  flex-wrap: wrap;\\n}\\n.stock-box {\\n  width: 325px;\\n  background-color: #448AFF; \\n  margin-bottom: 10px;\\n}\\n.stock-box p {\\n  font-size: 1.2em;\\n}\\n\\n    \"","module.exports = \"{{jsonResponse}}\\n<div class=\\\"main\\\">\\n  <span style=\\\"width: 100%;text-align: center\\\">STOCKS</span>\\n  <div class=\\\"zoom\\\">\\n    <li>ZOOM</li>\\n    <li><button>1M</button></li>\\n    <li><button>3M</button></li>\\n    <li><button>6M</button></li>\\n    <li><button>YTD</button></li>\\n    <li><button>1Y</button></li>\\n    <li><button>ALL</button></li>    \\n  </div>  \\n  <div class=\\\"chart\\\" id=\\\"chart_div\\\"></div>\\n  <div class=\\\"stocks\\\">\\n    <mat-card class=\\\"stock-box\\\" *ngFor=\\\"let company of companies\\\">\\n        <mat-card-title>{{company.code}}</mat-card-title>\\n        <mat-card-content>{{company.name}}</mat-card-content>\\n        <mat-card-actions><button mat-button (click)=\\\"deleteCompany(company)\\\">REMOVE</button></mat-card-actions>\\n    </mat-card>  \\n    <mat-card class=\\\"stock-box\\\">\\n      <mat-card-title>Syncs in realtime across clients</mat-card-title>\\n      <mat-card-content>        \\n          <input matInput name=\\\"codeCompany\\\" value=\\\"Sushi\\\" type=\\\"text\\\">        \\n      </mat-card-content>\\n      <mat-card-actions><button mat-button (click)=\\\"addCompany()\\\">ADD</button></mat-card-actions>\\n  </mat-card>  \\n  </div>\\n</div>\\n<a href=\\\"https://github.com/entropia-studio/\\\" target=\\\"_blank\\\">Coded by Entropia Studio</a>\"","import { Component, OnInit } from '@angular/core';\nimport {ChartStocksService} from './chart-stocks.service';\nimport {ChartStocks} from './chart-stocks';\nimport {Company} from './company';\n\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit{\n  title = 'app';  \n  jsonResponse: Object;\n  companies: Array<Company>;\n  \n  constructor(\n   // private charStocks: ChartStocks,\n    private chartStockService: ChartStocksService    \n  ) {}\n\n  ngOnInit(){\n    \n    this.chartStockService.getCompanies()\n    .subscribe(companies => {      \n      this.companies = companies;\n    })\n\n    /*\n    this.chartStockService.stocksSearchValues([\"GOOGL\"],\"ytd\")\n    .subscribe(chartData => {\n      //this.jsonResponse = JSON.stringify(chartData);\n      console.log(chartData[\"GOOGL\"].quote.companyName);\n     }     \n    );\n    */    \n  }\n\n  \n  deleteCompany(company : Company){    \n    this.chartStockService.deleteCompany(company.code)\n    .subscribe();    \n  }\n  \n  \n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport {HttpClientModule} from '@angular/common/http';\nimport { AppComponent } from './app.component';\nimport {MatCardModule} from '@angular/material/card';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatFormFieldModule} from '@angular/material/form-field';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    MatCardModule,\n    MatButtonModule,\n    MatInputModule,\n    MatFormFieldModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport { Observable,throwError } from 'rxjs';\nimport {ChartStocks} from './chart-stocks';\nimport {Company} from './company';\nimport { HttpHeaders } from '@angular/common/http';\nimport { catchError, retry } from 'rxjs/operators';\nimport { error } from '@angular/compiler/src/util';\n\nconst httpOptions = {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n};\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChartStocksService {  \n\n  urlApiStocks: string = 'https://api.iextrading.com/1.0/stock/market/batch?types=quote,chart';\n  urlApiCompanies: string = 'http://localhost:8080/api'; \n  constructor(private http: HttpClient) { }\n\n  getCompanies = ():Observable<Company[]> => {    \n    return this.http.get<Company[]>(this.urlApiCompanies + '/stocks');\n  }\n\n  stocksSearchValues = (symbols: Array<String>, range: String): Observable<ChartStocks> => {\n    this.urlApiStocks += \"&symbols= \" + symbols.join() + \"&range=\" + range;    \n    return this.http.get<ChartStocks>(this.urlApiStocks);           \n  }\n\n  deleteCompany = (companyCode: string) : Observable<{}> => {\n    this.urlApiCompanies = 'http://localhost:8080/api/company/delete/' + companyCode\n    console.log(this.urlApiCompanies);\n    return this.http.delete(this.urlApiCompanies)\n      .pipe(\n        //catchError(this.handleError())\n      )   \n  }\n\n  private handleError(error: HttpErrorResponse) {\n    if (error.error instanceof ErrorEvent) {\n      // A client-side or network error occurred. Handle it accordingly.\n      console.error('An error occurred:', error.error.message);\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong,\n      console.error(\n        `Backend returned code ${error.status}, ` +\n        `body was: ${error.error}`);\n    }\n    // return an observable with a user-facing error message\n    return throwError(\n      'Something bad happened; please try again later.');\n  };\n\n  /*\n  stocksSearchValues = (symbols: Array<String>, range: String): Observable<ChartStocks> => {\n    let observable = new Observable<ChartStocks>(() => {\n      this.http.get(this.urlApi)\n      .toPromise()\n      .then((response) => {\n        return (response as ChartStocks);\n      },error => {\n        reject(error);\n      })\n    })\n    return observable;\n  }\n  */\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}